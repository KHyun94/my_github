// Generated by Dagger (https://dagger.dev).
package com.kh.my_github.data.repository;

import com.kh.my_github.data.datasource.GitHubApiRemoteDataSource;
import com.kh.my_github.data.datasource.RepoPagingSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GitHubApiRepository_Factory implements Factory<GitHubApiRepository> {
  private final Provider<GitHubApiRemoteDataSource> gitHubApiRemoteDataSourceProvider;

  private final Provider<RepoPagingSource> repoPagingSourceProvider;

  public GitHubApiRepository_Factory(
      Provider<GitHubApiRemoteDataSource> gitHubApiRemoteDataSourceProvider,
      Provider<RepoPagingSource> repoPagingSourceProvider) {
    this.gitHubApiRemoteDataSourceProvider = gitHubApiRemoteDataSourceProvider;
    this.repoPagingSourceProvider = repoPagingSourceProvider;
  }

  @Override
  public GitHubApiRepository get() {
    return newInstance(gitHubApiRemoteDataSourceProvider.get(), repoPagingSourceProvider.get());
  }

  public static GitHubApiRepository_Factory create(
      Provider<GitHubApiRemoteDataSource> gitHubApiRemoteDataSourceProvider,
      Provider<RepoPagingSource> repoPagingSourceProvider) {
    return new GitHubApiRepository_Factory(gitHubApiRemoteDataSourceProvider, repoPagingSourceProvider);
  }

  public static GitHubApiRepository newInstance(GitHubApiRemoteDataSource gitHubApiRemoteDataSource,
      RepoPagingSource repoPagingSource) {
    return new GitHubApiRepository(gitHubApiRemoteDataSource, repoPagingSource);
  }
}
