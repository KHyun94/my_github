// Generated by Dagger (https://dagger.dev).
package com.kh.my_github.di;

import com.kh.my_github.data.datasource.GitHubApiRemoteDataSource;
import com.kh.my_github.data.network.service.RepoService;
import com.kh.my_github.data.network.service.UserService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataModule_ProvideUserRemoteDataSourceFactory implements Factory<GitHubApiRemoteDataSource> {
  private final Provider<UserService> userServiceProvider;

  private final Provider<RepoService> repoServiceProvider;

  public DataModule_ProvideUserRemoteDataSourceFactory(Provider<UserService> userServiceProvider,
      Provider<RepoService> repoServiceProvider) {
    this.userServiceProvider = userServiceProvider;
    this.repoServiceProvider = repoServiceProvider;
  }

  @Override
  public GitHubApiRemoteDataSource get() {
    return provideUserRemoteDataSource(userServiceProvider.get(), repoServiceProvider.get());
  }

  public static DataModule_ProvideUserRemoteDataSourceFactory create(
      Provider<UserService> userServiceProvider, Provider<RepoService> repoServiceProvider) {
    return new DataModule_ProvideUserRemoteDataSourceFactory(userServiceProvider, repoServiceProvider);
  }

  public static GitHubApiRemoteDataSource provideUserRemoteDataSource(UserService userService,
      RepoService repoService) {
    return Preconditions.checkNotNullFromProvides(DataModule.INSTANCE.provideUserRemoteDataSource(userService, repoService));
  }
}
