// Generated by Dagger (https://dagger.dev).
package com.kh.my_github.data.datasource;

import com.kh.my_github.data.network.service.RepoService;
import com.kh.my_github.data.network.service.UserService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GitHubApiRemoteDataSource_Factory implements Factory<GitHubApiRemoteDataSource> {
  private final Provider<UserService> userServiceProvider;

  private final Provider<RepoService> repoServiceProvider;

  public GitHubApiRemoteDataSource_Factory(Provider<UserService> userServiceProvider,
      Provider<RepoService> repoServiceProvider) {
    this.userServiceProvider = userServiceProvider;
    this.repoServiceProvider = repoServiceProvider;
  }

  @Override
  public GitHubApiRemoteDataSource get() {
    return newInstance(userServiceProvider.get(), repoServiceProvider.get());
  }

  public static GitHubApiRemoteDataSource_Factory create(Provider<UserService> userServiceProvider,
      Provider<RepoService> repoServiceProvider) {
    return new GitHubApiRemoteDataSource_Factory(userServiceProvider, repoServiceProvider);
  }

  public static GitHubApiRemoteDataSource newInstance(UserService userService,
      RepoService repoService) {
    return new GitHubApiRemoteDataSource(userService, repoService);
  }
}
