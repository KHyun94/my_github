// Generated by Dagger (https://dagger.dev).
package com.kh.my_github.data.repository;

import com.kh.my_github.data.datasource.TokenRemoteDataSource;
import com.kh.my_github.data.db.DataStoreManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginRepository_Factory implements Factory<LoginRepository> {
  private final Provider<TokenRemoteDataSource> tokenRemoteDataSourceProvider;

  private final Provider<DataStoreManager> dataStoreManagerProvider;

  public LoginRepository_Factory(Provider<TokenRemoteDataSource> tokenRemoteDataSourceProvider,
      Provider<DataStoreManager> dataStoreManagerProvider) {
    this.tokenRemoteDataSourceProvider = tokenRemoteDataSourceProvider;
    this.dataStoreManagerProvider = dataStoreManagerProvider;
  }

  @Override
  public LoginRepository get() {
    return newInstance(tokenRemoteDataSourceProvider.get(), dataStoreManagerProvider.get());
  }

  public static LoginRepository_Factory create(
      Provider<TokenRemoteDataSource> tokenRemoteDataSourceProvider,
      Provider<DataStoreManager> dataStoreManagerProvider) {
    return new LoginRepository_Factory(tokenRemoteDataSourceProvider, dataStoreManagerProvider);
  }

  public static LoginRepository newInstance(TokenRemoteDataSource tokenRemoteDataSource,
      DataStoreManager dataStoreManager) {
    return new LoginRepository(tokenRemoteDataSource, dataStoreManager);
  }
}
