// Generated by Dagger (https://dagger.dev).
package com.kh.my_github.di;

import com.kh.my_github.data.datasource.TokenRemoteDataSource;
import com.kh.my_github.data.db.DataStoreManager;
import com.kh.my_github.data.repository.LoginRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataModule_ProvideLoginRepositoryFactory implements Factory<LoginRepository> {
  private final Provider<TokenRemoteDataSource> remoteDataSourceProvider;

  private final Provider<DataStoreManager> dataStoreManagerProvider;

  public DataModule_ProvideLoginRepositoryFactory(
      Provider<TokenRemoteDataSource> remoteDataSourceProvider,
      Provider<DataStoreManager> dataStoreManagerProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.dataStoreManagerProvider = dataStoreManagerProvider;
  }

  @Override
  public LoginRepository get() {
    return provideLoginRepository(remoteDataSourceProvider.get(), dataStoreManagerProvider.get());
  }

  public static DataModule_ProvideLoginRepositoryFactory create(
      Provider<TokenRemoteDataSource> remoteDataSourceProvider,
      Provider<DataStoreManager> dataStoreManagerProvider) {
    return new DataModule_ProvideLoginRepositoryFactory(remoteDataSourceProvider, dataStoreManagerProvider);
  }

  public static LoginRepository provideLoginRepository(TokenRemoteDataSource remoteDataSource,
      DataStoreManager dataStoreManager) {
    return Preconditions.checkNotNullFromProvides(DataModule.INSTANCE.provideLoginRepository(remoteDataSource, dataStoreManager));
  }
}
