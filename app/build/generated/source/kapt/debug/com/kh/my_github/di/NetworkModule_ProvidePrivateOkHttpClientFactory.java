// Generated by Dagger (https://dagger.dev).
package com.kh.my_github.di;

import com.kh.my_github.data.db.DataStoreManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.kh.my_github.di.PrivateAccess")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvidePrivateOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<DataStoreManager> dataStoreManagerProvider;

  public NetworkModule_ProvidePrivateOkHttpClientFactory(
      Provider<DataStoreManager> dataStoreManagerProvider) {
    this.dataStoreManagerProvider = dataStoreManagerProvider;
  }

  @Override
  public OkHttpClient get() {
    return providePrivateOkHttpClient(dataStoreManagerProvider.get());
  }

  public static NetworkModule_ProvidePrivateOkHttpClientFactory create(
      Provider<DataStoreManager> dataStoreManagerProvider) {
    return new NetworkModule_ProvidePrivateOkHttpClientFactory(dataStoreManagerProvider);
  }

  public static OkHttpClient providePrivateOkHttpClient(DataStoreManager dataStoreManager) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.providePrivateOkHttpClient(dataStoreManager));
  }
}
